theory Note_for_Level5Sec_unchanged
begin

heuristic: S

// builtins: diffie-hellman, symmetric-encryption
// functions: 
builtins: symmetric-encryption, natural-numbers
functions: KDF/2 
// equations: 

tactic: secrecy_PFS
presort: S
prio:
  regex ".*State\(\s.*"
prio:
  regex ".*HCIIn\(.*"
prio:
  regex ".*KU\(\ssenc\(.*"
prio:
  regex ".*KU\(\sKDF\(.*"
prio:
  regex ".*KU\(\s~LTK.*"
prio:
  regex ".*splitEqs.*"

// Oracles
rule bindOracle:
  [
    In(<'Bind',$Host,$Ctrller>)
  ]
  --[
    Neq($Host,$Ctrller),
    OnlyOnceV(<$Host,$Ctrller>)
  ]->
  [
    !HCBind($Ctrller,$Host)
  ]

rule pairingOracle:
  [
    In(<'Pairing',$HI,$HR>),
    !HCBind($CI,$HI),
    !HCBind($CR,$HR),
    Fr(~LTK)
  ]
  --[
    Partner($HI,$HR),
    Partner($HR,$HI)
  ]->
  [ 
    !HostStateP('Paired',<$HI,'Initiator',$CI,$HR,~LTK>),
    !HostStateP('Paired',<$HR,'Responder',$CR,$HI,~LTK>)
  ]

rule connectLLOracle:
  [
    In(<'Connect',$HI,$HR>),
    !HostStateP('Paired',<$HI,'Initiator',$CI,$HR,~LTK>),
    !HostStateP('Paired',<$HR,'Responder',$CR,$HI,~LTK>),
    !HCBind($CI,$HI),
    !HCBind($CR,$HR),
    Fr(~HCIHandleI),
    Fr(~HCIHandleR),
    Fr(~AccessAdd)
  ]
  --[]->
  [
    HostState('LLConnected',<$HI,'Initiator',$CI,$HR,~LTK,~HCIHandleI>),
    HostState('LLConnected',<$HR,'Responder',$CR,$HI,~LTK,~HCIHandleR>),
    !ControllerStateP('LLConnected',<$CI,'Central',$HI,~HCIHandleI,~AccessAdd>),
    !ControllerStateP('LLConnected',<$CR,'Peripheral',$HR,~HCIHandleR,~AccessAdd>)
  ]

rule oracle:
  [
    !HostStateP('Paired',<$Host,Role,$C,$PeerHost,~LTK>),
    In(<'ReqLTK',$Host>)
  ]
  --[
    Reveal($Host)
  ]->
  [
    Out(~LTK)
  ]

// ! HCI Channel
rule hciChannelsend [color=#D3D3D3]:
  [
    HCIOut(src,dst,msg)
  ]
  --[]->
  [
    !HCIState(src,dst,msg)
  ]

rule hciChannelrev [color=#D3D3D3]:
  [
    !HCIState(src,dst,msg)
  ]
  --[]->
  [
    HCIIn(src,dst,msg)
  ]


//! Initiator Host
/*
PRE: HostState('LLConnected',<$HI,'Initiator',$CI,$HR,~LTK,~HCIHandleI>),
CON: HostState('SentLTK',<$HI,'Initiator',$CI,$HR,~LTK,~HCIHandleI>),
OUT-HCI: HCIOut($HI,$CI,<~HCIHandleI,'HCI_LE_Enable_Encryption',~LTK>)
*/
rule ihSendLTK [color=#DEBF80]:
  [
    HostState('LLConnected',<$HI,'Initiator',$CI,$HR,~LTK,~HCIHandleI>)
  ]
  --[]->
  [
    HCIOut($HI,$CI,<~HCIHandleI,'HCI_LE_Enable_Encryption',~LTK>),
    HostState('SentLTK',<$HI,'Initiator',$CI,$HR,~LTK,~HCIHandleI>)
  ]

/*
PRE: HostState('SentLTK',<$HI,'Initiator',$CI,$HR,LTK,~HCIHandleI>),
IN-HCI: HCIIn($CI,$HI,<~HCIHandleI,<'HCI_Command_State','HCI_LE_Enable_Encryption'>>)
        HCIIn($CI,$HI,<~HCIHandleI,<'HCI_Encrytion_Change'>>)
CON: HostState('LLEncrypted',<$HI,'Initiator',$CI,$HR,LTK,~HCIHandleI>),
*/
rule ihRevEncChange [color=#DEBF80]:
  [
    HostState('SentLTK',<$HI,'Initiator',$CI,$HR,LTK,~HCIHandleI>),
    HCIIn($CI,$HI,<~HCIHandleI,<'HCI_Command_State','HCI_LE_Enable_Encryption'>>),
    HCIIn($CI,$HI,<~HCIHandleI,<'HCI_Encrytion_Change'>>)
  ]
  --[]->
  [
    HostState('LLEncrypted',<$HI,'Initiator',$CI,$HR,LTK,~HCIHandleI>)
  ]


//! Initiator Controller
/*
PRE: !ControllerStateP('LLConnected',<$CI,'Central',$HI,~HCIHandleI,~AccessAdd>),
ACT: Fr(~SKDI),Fr(~IVI)
IN-HCI: HCIIn($HI,$CI,<~HCIHandleI,'HCI_LE_Enable_Encryption',LTK>),
CON: ControllerState('SentSKD',<$CI,'Central',$HI,~HCIHandleI,~AccessAdd,~SKDI,~IVI,LTK>),
OUT-BT: Out(<~AccessAdd,~SKDI,~IVI>),
OUT-HCI: HCIOut($CI,$HI,<~HCIHandleI,<'HCI_Command_State','HCI_LE_Enable_Encryption'>>)
*/
rule icRevLTK [color=#DCCD5B]:
  [
    !ControllerStateP('LLConnected',<$CI,'Central',$HI,~HCIHandleI,~AccessAdd>),
    HCIIn($HI,$CI,<~HCIHandleI,'HCI_LE_Enable_Encryption',LTK>),
    Fr(~SKDI),
    Fr(~IVI)
  ]
  --[
    OnlyOnceV(<'RevLTK',~HCIHandleI>)
  ]->
  [
    ControllerState('SentSKD',<$CI,'Central',$HI,~HCIHandleI,~AccessAdd,~SKDI,~IVI,LTK>),
    Out(<~AccessAdd,~SKDI,~IVI>),
    HCIOut($CI,$HI,<~HCIHandleI,<'HCI_Command_State','HCI_LE_Enable_Encryption'>>)
  ]

/*
PRE: ControllerState('SentSKD',<$CI,'Central',$HI,~HCIHandleI,~AccessAdd,~SKDI,~IVI,LTK>),
IN-BT: In(<~AccessAdd,~SKDR,~IVR>),
        In(<~AccessAdd,'LL_START_ENC_REQ'>),
CON: ControllerState('SenEnctRSP',<$CI,'Central',$HI,~HCIHandleI,~AccessAdd,SK,IV,sendCounterNew,revCounter>),
OUT-BT: Out(<~AccessAdd,senc(<<IV,sendCounter,directionFlagSend>,'LL_START_ENC_RSP'>,SK)>)
 */
rule icRevSKD [color=#DCCD5B]:
  let
    directionFlagSend = '1'
    directionFlagRev = '0'
    sendCounter = %1
    revCounter = %1
    sendCounterNew = sendCounter %+ %1
    SK = KDF(LTK, <~SKDI,~SKDR>)
    IV = <~IVI,~IVR>
    EncRsp = senc(<<IV,sendCounter,directionFlagSend>,'LL_START_ENC_RSP'>,SK)
  in
  [
    ControllerState('SentSKD',<$CI,'Central',$HI,~HCIHandleI,~AccessAdd,~SKDI,~IVI,LTK>),
    In(<~AccessAdd,~SKDR,~IVR>),
    In(<~AccessAdd,'LL_START_ENC_REQ'>)
  ]
  --[]->
  [
    ControllerState('SentEncRSP',<$CI,'Central',$HI,~HCIHandleI,~AccessAdd,SK,IV,sendCounterNew,revCounter>),
    Out(<~AccessAdd,EncRsp>)
  ]

/*
PRE: ControllerState('SentEncRSP',<$CI,'Central',$HI,~HCIHandleI,~AccessAdd,SK,IV,sendCounterNew,revCounter>),
IN-BT: In(<~AccessAdd,EncPeerRsp>)，
CON: ControllerState('RevEncRSP',<$CI,'Central',$HI,~HCIHandleI,~AccessAdd,SK,IV,sendCounterNew,revCounterNew>),
OUT-HCI：HCIOut($CI,$HI,<~HCIHandleI,<'HCI_Encrytion_Change'>>)
*/
rule icRevEncRSP [color=#DCCD5B]:
  let
    directionFlagSend = '1'
    directionFlagRev = '0'
    revCounterNew = %revCounter %+ %1
    EncPeerRsp = senc(<<IV,%revCounter,directionFlagRev>,'LL_START_ENC_RSP'>,SK)
  in
  [
    ControllerState('SentEncRSP',<$CI,'Central',$HI,~HCIHandleI,~AccessAdd,SK,IV,%sendCounter,%revCounter>),
    In(<~AccessAdd,EncPeerRsp>)
  ]
  --[
    Secret(SK),
    Honest($HI),
  ]->
  [
    ControllerState('RevEncRSP',<$CI,'Central',$HI,~HCIHandleI,~AccessAdd,SK,IV,%sendCounter,revCounterNew>),
    HCIOut($CI,$HI,<~HCIHandleI,<'HCI_Encrytion_Change'>>)
  ]


//! Responder Controller
/*
PRE: !ControllerStateP('LLConnected',<$CR,'Peripheral',$HR,~HCIHandleR,~AccessAdd>),
IN-BT: In(<~AccessAdd,~SKDI,~IVI>),
ACT: Fr(~SKDR),Fr(~IVR)
CON: ControllerState('RevSKDI',<$CR,'Peripheral',$HR,~HCIHandleR,~AccessAdd,~SKDI,~SKDR,~IVI,~IVR>),
OUT-BT: Out(<~AccessAdd,~SKDR,~IVR>),
OUT-HCI: HCIOut($CR,$HR,<~HCIHandleR,<'HCI_LE_Long_Term_Key_Request'>>)
*/
rule rcRevSKDI [color=#73AD96]:
  [
    !ControllerStateP('LLConnected',<$CR,'Peripheral',$HR,~HCIHandleR,~AccessAdd>),
    In(<~AccessAdd,~SKDI,~IVI>),
    Fr(~SKDR),
    Fr(~IVR)
  ]
  --[]->
  [
    ControllerState('RevSKDI',<$CR,'Peripheral',$HR,~HCIHandleR,~AccessAdd,~SKDI,~SKDR,~IVI,~IVR>),
    Out(<~AccessAdd,~SKDR,~IVR>),
    HCIOut($CR,$HR,<~HCIHandleR,<'HCI_LE_Long_Term_Key_Request'>>)
  ]

/*
PRE: ControllerState('RevSKDI',<$CR,'Peripheral',$HR,~HCIHandleR,~AccessAdd,~SKDI,~SKDR,~IVI,~IVR>),
IN-HCI: HCIIn($HR,$CR,<~HCIHandleR,'HCI_LE_Long_Term_Key_Request_Reply',LTK>)
CON: ControllerState('RevLTK',<$CR,'Peripheral',$HR,~HCIHandleR,~AccessAdd,SK,IV>),
OUT-BT: Out(<~AccessAdd,'LL_START_ENC_REQ'>),
OUT-HCI: HCIOut($CR,$HR,<~HCIHandleR,<'HCI_Command_Complete'>>)
*/
rule rcRevLTK [color=#73AD96]:
  let
    SK = KDF(LTK, <~SKDI,~SKDR>)
    IV = <~IVI,~IVR>
  in
  [
    ControllerState('RevSKDI',<$CR,'Peripheral',$HR,~HCIHandleR,~AccessAdd,~SKDI,~SKDR,~IVI,~IVR>),
    HCIIn($HR,$CR,<~HCIHandleR,'HCI_LE_Long_Term_Key_Request_Reply',LTK>)
  ]
  --[]->
  [
    ControllerState('RevLTK',<$CR,'Peripheral',$HR,~HCIHandleR,~AccessAdd,SK,IV>),
    Out(<~AccessAdd,'LL_START_ENC_REQ'>),
    HCIOut($CR,$HR,<~HCIHandleR,<'HCI_Command_Complete'>>)
  ]

/*
PRE: ControllerState('RevLTK',<$CR,'Peripheral',$HR,~HCIHandleR,~AccessAdd,SK,IV>),
IN-BT: In(<~AccessAdd,EncPeerRsp>),
CON: ControllerState('RevEncRSP',<$CR,'Peripheral',$HR,~HCIHandleR,~AccessAdd,SK,,sendCounterNew,revCounterNew>),
OUT-BT: Out(<~AccessAdd,EncRsp>),
OUT-HCI: HCIOut($CR,$HR,<~HCIHandleR,<'HCI_Encrytion_Change'>>)
*/
rule rcRevEncRSP [color=#73AD96]:
  let
    directionFlagSend = '0'
    directionFlagRev = '1'
    sendCounter = %1
    sendCounterNew = sendCounter %+ %1
    revCounter = %1
    revCounterNew = revCounter %+ %1
    EncPeerRsp = senc(<<IV,revCounter,directionFlagRev>,'LL_START_ENC_RSP'>,SK)
    EncRsp = senc(<<IV,sendCounter,directionFlagSend>,'LL_START_ENC_RSP'>,SK)
  in
  [
    ControllerState('RevLTK',<$CR,'Peripheral',$HR,~HCIHandleR,~AccessAdd,SK,IV>),
    In(<~AccessAdd,EncPeerRsp>)
  ]
  --[
    Secret(SK),
    Honest($HR)
  ]->
  [
    ControllerState('RevEncRSP',<$CR,'Peripheral',$HR,~HCIHandleR,~AccessAdd,SK,sendCounterNew,revCounterNew>),
    Out(<~AccessAdd,EncRsp>),
    HCIOut($CR,$HR,<~HCIHandleR,<'HCI_Encrytion_Change'>>)
  ]


//! Responder Host
/*
PRE: HostState('LLConnected',<$HR,'Responder',$CR,$HI,~LTK,~HCIHandleR>),
IN-HCI: HCIIn($CR,$HR,<~HCIHandleR,<'HCI_LE_Long_Term_Key_Request'>>)
CON: HostState('SentLTK',<$HR,'Responder',$CR,$HI,~LTK,~HCIHandleR>),
OUT-HCI: HCIOut($HR,$CR,<~HCIHandleR,'HCI_LE_Long_Term_Key_Request_Reply',~LTK>)
*/
rule rhRevLTKRequest:
  [
    HostState('LLConnected',<$HR,'Responder',$CR,$HI,~LTK,~HCIHandleR>),
    HCIIn($CR,$HR,<~HCIHandleR,<'HCI_LE_Long_Term_Key_Request'>>)
  ]
  --[]->
  [
    HostState('SentLTK',<$HR,'Responder',$CR,$HI,~LTK,~HCIHandleR>),
    HCIOut($HR,$CR,<~HCIHandleR,'HCI_LE_Long_Term_Key_Request_Reply',~LTK>)
  ]

/* 
PRE: HostState('SentLTK',<$HR,'Responder',$CR,$HI,~LTK,~HCIHandleR>),
IN-HCI: HCIIn($CR,$HR,<~HCIHandleR,<'HCI_Command_Complete'>>),
        HCIIn($CR,$HR,<~HCIHandleR,<'HCI_Encrytion_Change'>>),
CON: HostState('LLEncrypted',<$HR,'Responder',$CR,$HI,~LTK,~HCIHandleR>)
*/
rule rhRevEncChange:
  [
    HostState('SentLTK',<$HR,'Responder',$CR,$HI,~LTK,~HCIHandleR>),
    HCIIn($CR,$HR,<~HCIHandleR,<'HCI_Command_Complete'>>),
    HCIIn($CR,$HR,<~HCIHandleR,<'HCI_Encrytion_Change'>>)
  ]
  --[]->
  [
    HostState('LLEncrypted',<$HR,'Responder',$CR,$HI,~LTK,~HCIHandleR>)
  ]

restriction Inequality:
  "
  All x #i. Neq(x,x) @i ==> F
  "
/* 
restriction Equality:
  "
  All x y #i. Eq(x,y) @i ==> x = y
  "
*/

restriction OnlyOnceV:
  "
  All x #i #j. OnlyOnceV(x)@i & OnlyOnceV(x)@j ==> #i = #j
  "



lemma secrecy_PFS [heuristic={secrecy_PFS}, use_induction]:
  "All x #i.
    Secret(x)@i ==>
    not (Ex #j. K(x)@j) 
      | (Ex B #j. Reveal(B)@j & Honest(B)@i & j < i)
      | (Ex B BP #j #k. Reveal(BP)@j & Honest(B)@i & Partner(B,BP)@k & j < i)
  "

end