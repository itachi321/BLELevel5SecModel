theory Note_for_Level5Sec_changed
begin

// builtins: diffie-hellman, symmetric-encryption
// functions: 
builtins: symmetric-encryption, diffie-hellman, natural-numbers
functions: KDF/2, rand2Addr/1
// equations: 

#include "./tactics.spthyi"

// Oracles
rule bindOracle [color=#FF5733]:
  [
    In(<'Bind',$Host,$Ctrller>)
  ]
  --[
    Neq($Host,$Ctrller),
    OnlyOnceV(<$Host,$Ctrller>),
    FixRole($Host,'Host'),
    FixRole($Ctrller,'Controller'),
    BindHC($Host,$Ctrller)
  ]->
  [
    !HCBind($Ctrller,$Host)
  ]

rule pairingOracle [color=#FF5733]:
  [
    In(<'Pairing',$HI,$HR>),
    !HCBind($CI,$HI),
    !HCBind($CR,$HR),
    Fr(~LTK)
  ]
  --[
    Paired($HI,$HR),
    Paired($HR,$HI)
  ]->
  [ 
    !HostStateP('Paired',<$HI,'Initiator',$CI,$HR,~LTK>),
    !HostStateP('Paired',<$HR,'Responder',$CR,$HI,~LTK>)
  ]

rule oracle [color=#FF5733]:
  [
    !HostStateP('Paired',<$Host,Role,$C,$PeerHost,~LTK>),
    In(<'ReqLTK',$Host>)
  ]
  --[
    Reveal($Host)
  ]->
  [
    Out(~LTK)
  ]


rule connectLLOracle:
  let
    AccessAdd=rand2Addr(~AddRandom)
  in
  [
    In(<'Connect',$HI,$HR>),
    !HostStateP('Paired',<$HI,'Initiator',$CI,$HR,~LTK>),
    !HostStateP('Paired',<$HR,'Responder',$CR,$HI,~LTK>),
    !HCBind($CI,$HI),
    !HCBind($CR,$HR),
    Fr(~HCIHandleI),
    Fr(~HCIHandleR),
    Fr(~AddRandom)
  ]
  --[]->
  [
    HostState('LLConnected',<$HI,'Initiator',$CI,$HR,~LTK,~HCIHandleI>),
    !ControllerStateP('LLConnected',<$CI,'Central',$HI,~HCIHandleI,AccessAdd>),
    HostState('LLConnected',<$HR,'Responder',$CR,$HI,~LTK,~HCIHandleR>),
    !ControllerStateP('LLConnected',<$CR,'Peripheral',$HR,~HCIHandleR,AccessAdd>)
  ]

rule prekeyOracle [color=#FF5733]:
  [
    !SessionPreKey(sid,LTK),
    In(<'ReqControllerPreKey'>)
  ]
  --[
    RevealPrekey(sid)
  ]->
  [
    Out(LTK)
  ]

rule sesskeyOracle [color=#FF5733]:
  [
    !SessionKey(sid,SK),
    In(<'ReqControllerSession'>)
  ]
  --[
    RevealSesskey(sid)
  ]->
  [
    Out(SK)
  ]

rule revealHostTemporaryOracle [color=#FF5733]:
  [
    !HostTemporarySecret($host,~hciHandel,sid,~sk),
    In('RevealHostTemporarySecret')
  ]
  --[
    RevealHostTemporary(sid)
  ]->
  [
    Out(~sk)
  ]


// ! HCI Channel
rule hciChannelsend [color=#D3D3D3]:
  [
    HCIOut(src,dst,<handle,msg>)
  ]
  --[]->
  [
    !HCIState(src,dst,<handle,msg>)
  ]

rule hciChannelrev [color=#D3D3D3]:
  [
    !HCIState(src,dst,<handle,msg>)
  ]
  --[]->
  [
    HCIIn(src,dst,<handle,msg>)
  ]

// rule hciOracle:
//   [
//     !HCIState(src,dst,<handle,msg>)
//   ]
//   --[
//     BreakHCI(handle)
//   ]->
//   [
//     Out(<src,dst,<handle,msg>>)
//   ]

// relay msg between HCI and BLE
rule hciInTranOut:
  [
    !ControllerStateP('LLConnected',<$C,Role,$Host,~HCIHandle,AccessAdd>),
    HCIIn($Host,$C,<~HCIHandle,<'ACL',msg>>)
  ]
  --[]->
  [
    Out(<AccessAdd,msg>)
  ]

rule inTranHCIOut:
  [
    !ControllerStateP('LLConnected',<$C,Role,$Host,~HCIHandle,AccessAdd>),
    In(<AccessAdd,msg>)
  ]
  --[]->
  [
    HCIOut($C,$Host,<~HCIHandle,<'ACL',msg>>)
  ]

//! Initiator Host
/*
PRE: HostState('LLConnected',<$HI,'Initiator',$CI,$HR,~LTK,~HCIHandleI>),
ACT: Fr(~DHEskI)
CON: HostState('SentDHEpk',<$HI,'Initiator',$CI,$HR,~LTK,~HCIHandleI,~DHEskI>),
OUT-HCI: HCIOut($HI,$CI,<~HCIHandleI,<'ACL',DHEpkI>>)
*/
rule ihSendDHEpk [color=#DEBF80]:
  let
    DHEpkI = 'g' ^ ~DHEskI
  in
  [
    HostState('LLConnected',<$HI,'Initiator',$CI,$HR,~LTK,~HCIHandleI>),
    Fr(~DHEskI)
  ]
  --[]->
  [
    HostState('SentDHEpk',<$HI,'Initiator',$CI,$HR,~LTK,~HCIHandleI,~DHEskI>),
    HCIOut($HI,$CI,<~HCIHandleI,<'ACL',DHEpkI>>)
  ]

/*
PRE: HostState('SentDHEpk',<$HI,'Initiator',$CI,$HR,~LTK,~HCIHandleI,~DHEskI>),
IN-HCI: HCIIn($CI,$HI,<~HCIHandleI,<'ACL',DHEpkR>>)
CON: HostState('SentLTK',<$HI,'Initiator',$CI,$HR,LEK,~HCIHandleI>),
OUT-HCI: HCIOut($HI,$CI,<~HCIHandleI,'HCI_LE_Enable_Encryption',LEK>)
*/
rule ihSendLTK [color=#DEBF80]:
  let
    LEK = KDF(~LTK,DHEpkR ^ ~DHEskI)
  in
  [
    HostState('SentDHEpk',<$HI,'Initiator',$CI,$HR,~LTK,~HCIHandleI,~DHEskI>),
    HCIIn($CI,$HI,<~HCIHandleI,<'ACL',DHEpkR>>)
  ]
  --[
    Neq(DHEpkR,DH_neutral),
    Src_IHOutLTK(LEK),
    SecretDHsk(~DHEskI,LEK)
  ]->
  [
    HCIOut($HI,$CI,<~HCIHandleI,'HCI_LE_Enable_Encryption',LEK>),
    HostState('SentLTK',<$HI,'Initiator',$CI,$HR,LEK,~HCIHandleI>),
    !HostTemporarySecret($HI,~HCIHandleI,LEK,~DHEskI)
  ]

/*
PRE: HostState('SentLTK',<$HI,'Initiator',$CI,$HR,LTK,~HCIHandleI>),
IN-HCI: HCIIn($CI,$HI,<~HCIHandleI,<'HCI_Command_State','HCI_LE_Enable_Encryption'>>)
        HCIIn($CI,$HI,<~HCIHandleI,<'HCI_Encrytion_Change'>>)
CON: HostState('LLEncrypted',<$HI,'Initiator',$CI,$HR,LTK,~HCIHandleI>),
*/
rule ihRevEncChange [color=#DEBF80]:
  [
    HostState('SentLTK',<$HI,'Initiator',$CI,$HR,LTK,~HCIHandleI>),
    HCIIn($CI,$HI,<~HCIHandleI,<'HCI_Command_State','HCI_LE_Enable_Encryption'>>),
    HCIIn($CI,$HI,<~HCIHandleI,<'HCI_Encrytion_Change'>>)
  ]
  --[]->
  [
    HostState('LLEncrypted',<$HI,'Initiator',$CI,$HR,LTK,~HCIHandleI>)
  ]


//! Initiator Controller
/*
PRE: !ControllerStateP('LLConnected',<$CI,'Central',$HI,~HCIHandleI,AccessAdd>),
ACT: Fr(~SKDI),Fr(~IVI)
IN-HCI: HCIIn($HI,$CI,<~HCIHandleI,'HCI_LE_Enable_Encryption',LTK>),
CON: ControllerState('SentSKD',<$CI,'Central',$HI,~HCIHandleI,AccessAdd,~SKDI,~IVI,LTK>),
OUT-BT: Out(<AccessAdd,~SKDI,~IVI>),
OUT-HCI: HCIOut($CI,$HI,<~HCIHandleI,<'HCI_Command_State','HCI_LE_Enable_Encryption'>>)
*/
rule icRevLTK [color=#DCCD5B]:
  [
    !ControllerStateP('LLConnected',<$CI,'Central',$HI,~HCIHandleI,AccessAdd>),
    HCIIn($HI,$CI,<~HCIHandleI,'HCI_LE_Enable_Encryption',LTK>),
    Fr(~SKDI),
    Fr(~IVI)
  ]
  --[
    OnlyOnceV(<'RevLTK',~HCIHandleI>),
    Src_ICInLTK(LTK)
  ]->
  [
    ControllerState('SentSKD',<$CI,'Central',$HI,~HCIHandleI,AccessAdd,~SKDI,~IVI,LTK>),
    Out(<AccessAdd,~SKDI,~IVI>),
    HCIOut($CI,$HI,<~HCIHandleI,<'HCI_Command_State','HCI_LE_Enable_Encryption'>>)
  ]

/*
PRE: ControllerState('SentSKD',<$CI,'Central',$HI,~HCIHandleI,AccessAdd,~SKDI,~IVI,LTK>),
IN-BT:In(<AccessAdd,~SKDR,~IVR>),
      In(<AccessAdd,'LL_START_ENC_REQ'>),
CON: ControllerState('SentEncRSP',<$CI,'Central',$HI,~HCIHandleI,AccessAdd,SK,IV,sendCounterNew,revCounter,sid>),
OUT-BT: Out(<AccessAdd,EncRsp>)
 */
rule icRevSKD [color=#DCCD5B]:
  let
    directionFlagSend = '1'
    directionFlagRev = '0'
    sendCounter = %1
    revCounter = %1
    sendCounterNew = sendCounter %+ %1
    SK = KDF(LTK, <~SKDI,~SKDR>)
    IV = <~IVI,~IVR>
    EncRsp = senc(<<IV,sendCounter,directionFlagSend>,'LL_START_ENC_RSP'>,SK)
    sid = LTK
  in
  [
    ControllerState('SentSKD',<$CI,'Central',$HI,~HCIHandleI,AccessAdd,~SKDI,~IVI,LTK>),
    In(<AccessAdd,~SKDR,~IVR>),
    In(<AccessAdd,'LL_START_ENC_REQ'>)
  ]
  --[
    Running($CI,SK)
  ]->
  [
    ControllerState('SentEncRSP',<$CI,'Central',$HI,~HCIHandleI,AccessAdd,SK,IV,sendCounterNew,revCounter,sid>),
    !SessionPreKey(sid,LTK),
    !SessionKey(sid,SK),
    Out(<AccessAdd,EncRsp>)
  ]

/*
PRE: ControllerState('SentEncRSP',<$CI,'Central',$HI,~HCIHandleI,AccessAdd,SK,IV,%sendCounter,%revCounter,sid>,
IN-BT: In(<AccessAdd,EncPeerRsp>)，
CON: ControllerState('RevEncRSP',<$CI,'Central',$HI,~HCIHandleI,AccessAdd,SK,IV,%sendCounter,revCounterNew,sid>),
OUT-HCI：HCIOut($CI,$HI,<~HCIHandleI,<'HCI_Encrytion_Change'>>)
*/
rule icRevEncRSP [color=#DCCD5B]:
  let
    directionFlagSend = '1'
    directionFlagRev = '0'
    revCounterNew = %revCounter %+ %1
    EncPeerRsp = senc(<<IV,%revCounter,directionFlagRev>,'LL_START_ENC_RSP'>,SK)
  in
  [
    ControllerState('SentEncRSP',<$CI,'Central',$HI,~HCIHandleI,AccessAdd,SK,IV,%sendCounter,%revCounter,sid>),
    In(<AccessAdd,EncPeerRsp>)
  ]
  --[
    Secret(SK),
    Honest($HI),
    Session(sid),
    HostHandel($HI,~HCIHandleI),
    Commit($CI,SK)
  ]->
  [
    ControllerState('RevEncRSP',<$CI,'Central',$HI,~HCIHandleI,AccessAdd,SK,IV,%sendCounter,revCounterNew,sid>),
    HCIOut($CI,$HI,<~HCIHandleI,<'HCI_Encrytion_Change'>>)
  ]


//! Responder Controller
/*
PRE: !ControllerStateP('LLConnected',<$CR,'Peripheral',$HR,~HCIHandleR,AccessAdd>),
IN-BT: In(<AccessAdd,~SKDI,~IVI>),
ACT: Fr(~SKDR),Fr(~IVR)
CON: ControllerState('RevSKDI',<$CR,'Peripheral',$HR,~HCIHandleR,AccessAdd,~SKDI,~SKDR,~IVI,~IVR>),
OUT-BT: Out(<AccessAdd,~SKDR,~IVR>),
OUT-HCI: HCIOut($CR,$HR,<~HCIHandleR,<'HCI_LE_Long_Term_Key_Request'>>)
*/
rule rcRevSKDI [color=#73AD96]:
  [
    !ControllerStateP('LLConnected',<$CR,'Peripheral',$HR,~HCIHandleR,AccessAdd>),
    In(<AccessAdd,~SKDI,~IVI>),
    Fr(~SKDR),
    Fr(~IVR)
  ]
  --[]->
  [
    ControllerState('RevSKDI',<$CR,'Peripheral',$HR,~HCIHandleR,AccessAdd,~SKDI,~SKDR,~IVI,~IVR>),
    Out(<AccessAdd,~SKDR,~IVR>),
    HCIOut($CR,$HR,<~HCIHandleR,<'HCI_LE_Long_Term_Key_Request'>>)
  ]

/*
PRE: ControllerState('RevSKDI',<$CR,'Peripheral',$HR,~HCIHandleR,AccessAdd,~SKDI,~SKDR,~IVI,~IVR>),
IN-HCI: HCIIn($HR,$CR,<~HCIHandleR,'HCI_LE_Long_Term_Key_Request_Reply',LTK>)
CON: ControllerState('RevLTK',<$CR,'Peripheral',$HR,~HCIHandleR,AccessAdd,SK,IV,sid>),
OUT-BT: Out(<AccessAdd,'LL_START_ENC_REQ'>),
OUT-HCI: HCIOut($CR,$HR,<~HCIHandleR,<'HCI_Command_Complete'>>)
*/
rule rcRevLTK [color=#73AD96]:
  let
    sid = LTK
    SK = KDF(LTK, <~SKDI,~SKDR>)
    IV = <~IVI,~IVR>
  in
  [
    ControllerState('RevSKDI',<$CR,'Peripheral',$HR,~HCIHandleR,AccessAdd,~SKDI,~SKDR,~IVI,~IVR>),
    HCIIn($HR,$CR,<~HCIHandleR,'HCI_LE_Long_Term_Key_Request_Reply',LTK>)
  ]
  --[
    Src_RCInLTK(LTK),
    Running($CR,SK)
  ]->
  [
    ControllerState('RevLTK',<$CR,'Peripheral',$HR,~HCIHandleR,AccessAdd,SK,IV,sid>),
    !SessionPreKey(sid,LTK),
    !SessionKey(sid,SK),
    Out(<AccessAdd,'LL_START_ENC_REQ'>),
    HCIOut($CR,$HR,<~HCIHandleR,<'HCI_Command_Complete'>>)
  ]

/*
PRE: ControllerState('RevLTK',<$CR,'Peripheral',$HR,~HCIHandleR,AccessAdd,SK,IV,sid>),
IN-BT: In(<AccessAdd,EncPeerRsp>),
CON: ControllerState('RevEncRSP',<$CR,'Peripheral',$HR,~HCIHandleR,AccessAdd,SK,,sendCounterNew,revCounterNew,sid>),
OUT-BT: Out(<AccessAdd,EncRsp>),
OUT-HCI: HCIOut($CR,$HR,<~HCIHandleR,<'HCI_Encrytion_Change'>>)
*/
rule rcRevEncRSP [color=#73AD96]:
  let
    directionFlagSend = '0'
    directionFlagRev = '1'
    sendCounter = %1
    sendCounterNew = sendCounter %+ %1
    revCounter = %1
    revCounterNew = revCounter %+ %1
    EncPeerRsp = senc(<<IV,revCounter,directionFlagRev>,'LL_START_ENC_RSP'>,SK)
    EncRsp = senc(<<IV,sendCounter,directionFlagSend>,'LL_START_ENC_RSP'>,SK)
  in
  [
    ControllerState('RevLTK',<$CR,'Peripheral',$HR,~HCIHandleR,AccessAdd,SK,IV,sid>),
    In(<AccessAdd,EncPeerRsp>)
  ]
  --[
    Secret(SK),
    Session(sid),
    Honest($HR),
    Commit($CR,SK)
  ]->
  [
    ControllerState('RevEncRSP',<$CR,'Peripheral',$HR,~HCIHandleR,AccessAdd,SK,sendCounterNew,revCounterNew,sid>),
    Out(<AccessAdd,EncRsp>),
    HCIOut($CR,$HR,<~HCIHandleR,<'HCI_Encrytion_Change'>>)
  ]



//! Responder Host
/*
PRE: HostState('LLConnected',<$HR,'Responder',$CR,$HI,~LTK,~HCIHandleR>),
IN-HCI: HCIIn($CR,$HR,<~HCIHandleR,<'ACL',DHEpkI>>),
ACT: Fr(~DHEskR)
CON: HostState('SentDHEpk',<$HR,'Responder',$CR,$HI,~LTK,~HCIHandleR,~DHEskR,DHEpkI>),
OUT-HCI: HCIOut($HR,$CR,<~HCIHandleR,<'ACL',DHEpkR>>)
*/
rule rhSendDHEpk [color=#5F9069]:
  let
    DHEpkR = 'g' ^ ~DHEskR
  in
  [
    HostState('LLConnected',<$HR,'Responder',$CR,$HI,~LTK,~HCIHandleR>),
    HCIIn($CR,$HR,<~HCIHandleR,<'ACL',DHEpkI>>),
    Fr(~DHEskR)
  ]
  --[
    Neq(DHEpkI,DH_neutral)
  ]->
  [
    HostState('SentDHEpk',<$HR,'Responder',$CR,$HI,~LTK,~HCIHandleR,~DHEskR,DHEpkI>),
    HCIOut($HR,$CR,<~HCIHandleR,<'ACL',DHEpkR>>)
  ]

/*
PRE: HostState('SentDHEpk',<$HR,'Responder',$CR,$HI,~LTK,~HCIHandleR,~DHEskR,DHEpkI>),
IN-HCI: HCIIn($CR,$HR,<~HCIHandleR,<'HCI_LE_Long_Term_Key_Request'>>)
CON: HostState('SentLTK',<$HR,'Responder',$CR,$HI,LEK,~HCIHandleR>),
OUT-HCI: HCIOut($HR,$CR,<~HCIHandleR,'HCI_LE_Long_Term_Key_Request_Reply',LEK>)
*/
rule rhRevLTKRequest [color=#5F9069]:
  let
    LEK = KDF(~LTK,DHEpkI ^ ~DHEskR)
  in
  [
    HostState('SentDHEpk',<$HR,'Responder',$CR,$HI,~LTK,~HCIHandleR,~DHEskR,DHEpkI>),
    HCIIn($CR,$HR,<~HCIHandleR,<'HCI_LE_Long_Term_Key_Request'>>)
  ]
  --[
    Src_RHOutLTK(LEK),
    SecretDHsk(~DHEskR,LEK)
  ]->
  [
    HostState('SentLTK',<$HR,'Responder',$CR,$HI,LEK,~HCIHandleR>),
    HCIOut($HR,$CR,<~HCIHandleR,'HCI_LE_Long_Term_Key_Request_Reply',LEK>),
    !HostTemporarySecret($HR,~HCIHandleR,LEK,~DHEskR)
  ]


/* 
PRE: HostState('SentLTK',<$HR,'Responder',$CR,$HI,LTK,~HCIHandleR>),
IN-HCI: HCIIn($CR,$HR,<~HCIHandleR,<'HCI_Command_Complete'>>),
        HCIIn($CR,$HR,<~HCIHandleR,<'HCI_Encrytion_Change'>>),
CON: HostState('LLEncrypted',<$HR,'Responder',$CR,$HI,LTK,~HCIHandleR>)
*/
rule rhRevEncChange [color=#5F9069]:
  [
    HostState('SentLTK',<$HR,'Responder',$CR,$HI,LTK,~HCIHandleR>),
    HCIIn($CR,$HR,<~HCIHandleR,<'HCI_Command_Complete'>>),
    HCIIn($CR,$HR,<~HCIHandleR,<'HCI_Encrytion_Change'>>)
  ]
  --[]->
  [
    HostState('LLEncrypted',<$HR,'Responder',$CR,$HI,LTK,~HCIHandleR>)
  ]

restriction Inequality:
  "
  All x #i. Neq(x,x) @i ==> F
  "
/* 
restriction Equality:
  "
  All x y #i. Eq(x,y) @i ==> x = y
  "
*/

restriction OnlyOnceV:
  "
  All x #i #j. OnlyOnceV(x)@i & OnlyOnceV(x)@j ==> #i = #j
  "

restriction fixRole:
  "
  All hoc role1 role2 #i #j. FixRole(hoc,role1)@i & FixRole(hoc,role2)@j ==> role1=role2
  "

lemma type [sources,heuristic={typeTactic}]:
  "
  (All ltk #i. Src_ICInLTK(ltk)@i ==> Ex #j. Src_IHOutLTK(ltk)@j) &
  (All ltk #i. Src_RCInLTK(ltk)@i ==> Ex #j. Src_RHOutLTK(ltk)@j)
  "

lemma SecrecyOfDHPrivateKeyunlessRevealSK [reuse]:
    "
    All sk sid #i. SecretDHsk(sk,sid)@i ==> 
        not(Ex #j. KU(sk)@j)
      | (Ex #k. RevealHostTemporary(sid)@k)
    "

predicates: FreshSession(sid,host,#i) <=> 
  not(Ex #j. Reveal(host)@j & j<i) &
  not(Ex peer #j #k. Paired(host,peer)@j & Reveal(peer)@k & k<i) &
  // Partner has the same sid.
  not(Ex #j. RevealPrekey(sid)@j) & not(Ex #j. RevealSesskey(sid)@j) &
  not(Ex #j. RevealHostTemporary(sid)@j)

lemma secrecy_PFS [heuristic={secrecy_PFS}]:
  "All x sid host #i.
    Secret(x)@i & Session(sid)@i & Honest(host)@i & FreshSession(sid,host,#i)  ==>
      not (Ex #j. K(x)@j)
  "

lemma noninjective_agreement_CP_SK [heuristic={secrecy_PFS}]:
  "
  All A sk sid host #i. Commit(A,sk)@i & Session(sid)@i & Honest(host)@i & FreshSession(sid,host,#i) ==> 
    (Ex peer B #j #k #l. Running(B,sk)@j & Paired(host,peer)@k & BindHC(peer,B)@l)
  "

lemma injective_agreement_CP_SK [heuristic={secrecy_PFS}]:
  "
  All A sk sid host #i. Commit(A,sk)@i & Session(sid)@i & Honest(host)@i & FreshSession(sid,host,#i) ==> 
    (Ex peer B #j #k #l. Running(B,sk)@j & Paired(host,peer)@k & BindHC(peer,B)@l & j<i
    & not(Ex A2 #i2. Commit(A2,sk)@i2 & not(#i2=#i) & not(B=A2)))
  "

end